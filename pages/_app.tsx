import { useEffect, useState } from "react";
import type { AppProps } from "next/app";
import Head from "next/head";
import { ChakraProvider, extendTheme } from "@chakra-ui/react";
import { Analytics } from "@vercel/analytics/react";

import Layout from "../components/layout";

import { AuthProvider } from "../contexts/auth";
import User from "../lib/interfaces/user";
import { MediaProvider } from "../contexts/media/media-provider";
import { ToastContainer } from "react-toastify";

import "react-toastify/dist/ReactToastify.css";
import { TemplatesProvider } from "../contexts/templates";
import { IntegrationsProvider } from "@/contexts/integrations";
import { useRouter } from "next/router";
import path from "path";

// Theme
const colors = {
  transparent: "transparent",
  gray: {
    800: "#0B0916",
  },
};

const config = {
  initialColorMode: "dark",
  useSystemColorMode: false,
};

const styles = {
  global: {},
};

const theme = extendTheme({
  colors,
  config,
  styles,
});

// App
interface InitialAppProps extends AppProps {
  props: {
    authURL: string;
    user: User | null;
  };
}

export default function App({ Component, pageProps }: InitialAppProps) {
  const [mounted, setMounted] = useState(false);
  const { pathname } = useRouter();

  useEffect(() => {
    setMounted(true);
  }, []);

  {
    /* Don't render layout on oauth */
  }
  if (pathname.startsWith("/oauth")) {
    return (
      <ChakraProvider theme={theme}>
        <Component {...pageProps} />
      </ChakraProvider>
    );
  }

  return (
    <ChakraProvider theme={theme}>
      <Head>
        <title>StarOverlay</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon@32.png" />
      </Head>

      {process.env.NODE_ENV === "production" && <Analytics />}
      <ToastContainer />

      {/* TODO: Use fetch in pages instead global contexts. */}
      <AuthProvider>
        <IntegrationsProvider>
          <MediaProvider>
            <TemplatesProvider>
              {mounted && (
                <Layout>
                  <Component {...pageProps} />
                </Layout>
              )}
            </TemplatesProvider>
          </MediaProvider>
        </IntegrationsProvider>
      </AuthProvider>
    </ChakraProvider>
  );
}
